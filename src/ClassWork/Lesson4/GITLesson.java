package ClassWork.Lesson4;

public class GITLesson {
    //Сначала инициализировать GIT-репозиторий - команда git init, выполняется один раз, появится скрытая папка .git
    //каждый проект = GIT-репозиторий
    //если нужно чтобы папки или файлы игнорировались GIT, нужно поместить их в файл .gitignore это папки out и idea,
    //плюс папки среды
    //git add - состояние каких файлов надо сохранять, если указать папку-значит все файлы, пустые папки гит игнорирует
    //сначала git add, потом само сохранение
    //сохранить измнения - git commit, чтобы оставить комментарий, добавить -m "коммент"
    //если нужно зафиксировать изменение или добавление фалов, удаление или переименование нужно сперва делать git add
    //git add - индексация изменений, git commit - фиксация измений
    //если после git add в добавленный файл были внесены другие изменения, эти изменения в коммит не уйдут, нужно снова
    //делать git add чтобы их влючить
    //свять локального репозитория и удаленного - git remote add origin https://github.com/AlexSmith1991/tst-git.git
    //origin - помечает имя главного удаленного репозитория
    //push изменений - git push -u origin master
    //remote add - добавляет удаленный репозиторий, remote remove - удаляет
    //push отправляет все коммиты
    //master - имя ветки, она создается по умолчанию, принято что в ветку master выкладываем рабочий код, могут быть
    //другие ветки
    //среда тоже будет просить определить эту связь, в консоли после этого достаточно просто git push, если репозиторий
    //и ветка не поменялись
    //git push -u
    //чтобы выйти из редактора сообщения - ctrl+c, лучше писать сообщение через -m
    //чтобы получить проект из удаленного репозитория - git clone + ссылка, консоль надо открывать в нужной директории
    //аналог git init, выполняется один раз
    //чтобы получить изменения в уже существующий из удаленного - git pull
    //если ветка не master, то указать имя ветки
    //когда возникают конфликты, файлы с конфликтами не поменяются, pull не срабатывает вообще ни для чего
    //если нужно сохранить локальные изменения - git add и commit
    //после pull с конфликтом изменения появятся файлы, потом надо вручную выбрать какой вариант правильный
    //среда предложит в отдельном окне выбрать изменения или объединить и то и другое, если не устроит, то физически
    //править в файле
    //спрятать изменения, которые не попали в коммит - git stash
    //прячет все изменения и возвращает проект в состояние последнего коммита
    //вернуть изменения - git stash apply
    //при возврате изменений также может возникнуть конфликт
    //справка по всем коммандам - git
    //git reset --hard HEAD~1 -
    //git reset --hard - возвращает в состояние какого-то коммита хэш-сумма которого указана
    //revert <коммит> - создает новый коммит поверх предыдущего, отменяя изменения, которые были сохранены указанным
    //коммитом
    //git log - история коммитов
    //в среде - вкладка version control
    //git checkout хэш сумма коммита - просмотр состояния в момент указанного коммита
    //после такого просмотра - git checkout имя ветки - вернуться обратно
    //для создания новой ветки от определенного коммита - git checkout -b имя ветки хэш сумма коммита, с которого нужно
    //начать, если хэш сумму коммита не указать, то новая ветка начнется от текущего состояния
    //по умолчанию создается ветка мастер, по договоренности в ней выкладывается рабочий код
    //в любой момент времени можно с одной ветки переключиться на любую другую
    //когда нужно объединить - можно выполнить слияние веток, в момент слиятния может быть конфликт
    //git branch - список веток
    //git branch имя ветки - создание новой ветки, имя латиницей, без пробелов
    //git checkout имя ветки - переход без создания
    //git checkout -b - указывается новая ветка, которая еще не существует на данный момент
    //git push origin имя ветки - отправится содержимое указанной ветки
    //git push origin --delete имя ветки - удаление ветки на удаленном репозитарии
    //git branch -d имя ветки - удаление с локального
}

